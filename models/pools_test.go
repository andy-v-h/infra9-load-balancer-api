// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

func testPoolsUpsert(t *testing.T) {
	t.Parallel()

	if len(poolAllColumns) == len(poolPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Pool{}
	if err = randomize.Struct(seed, &o, poolDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Pool struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Pool: %s", err)
	}

	count, err := Pools().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, poolDBTypes, false, poolPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Pool struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Pool: %s", err)
	}

	count, err = Pools().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPools(t *testing.T) {
	t.Parallel()

	query := Pools()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPoolsSoftDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pool{}
	if err = randomize.Struct(seed, o, poolDBTypes, true, poolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pool struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Pools().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPoolsQuerySoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pool{}
	if err = randomize.Struct(seed, o, poolDBTypes, true, poolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pool struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Pools().DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Pools().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPoolsSliceSoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pool{}
	if err = randomize.Struct(seed, o, poolDBTypes, true, poolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pool struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PoolSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Pools().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPoolsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pool{}
	if err = randomize.Struct(seed, o, poolDBTypes, true, poolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pool struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Pools().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPoolsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pool{}
	if err = randomize.Struct(seed, o, poolDBTypes, true, poolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pool struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Pools().DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Pools().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPoolsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pool{}
	if err = randomize.Struct(seed, o, poolDBTypes, true, poolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pool struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PoolSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Pools().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPoolsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pool{}
	if err = randomize.Struct(seed, o, poolDBTypes, true, poolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pool struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PoolExists(ctx, tx, o.PoolID)
	if err != nil {
		t.Errorf("Unable to check if Pool exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PoolExists to return true, but got false.")
	}
}

func testPoolsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pool{}
	if err = randomize.Struct(seed, o, poolDBTypes, true, poolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pool struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	poolFound, err := FindPool(ctx, tx, o.PoolID)
	if err != nil {
		t.Error(err)
	}

	if poolFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPoolsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pool{}
	if err = randomize.Struct(seed, o, poolDBTypes, true, poolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pool struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Pools().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPoolsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pool{}
	if err = randomize.Struct(seed, o, poolDBTypes, true, poolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pool struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Pools().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPoolsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	poolOne := &Pool{}
	poolTwo := &Pool{}
	if err = randomize.Struct(seed, poolOne, poolDBTypes, false, poolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pool struct: %s", err)
	}
	if err = randomize.Struct(seed, poolTwo, poolDBTypes, false, poolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pool struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = poolOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = poolTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Pools().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPoolsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	poolOne := &Pool{}
	poolTwo := &Pool{}
	if err = randomize.Struct(seed, poolOne, poolDBTypes, false, poolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pool struct: %s", err)
	}
	if err = randomize.Struct(seed, poolTwo, poolDBTypes, false, poolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pool struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = poolOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = poolTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Pools().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func poolBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Pool) error {
	*o = Pool{}
	return nil
}

func poolAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Pool) error {
	*o = Pool{}
	return nil
}

func poolAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Pool) error {
	*o = Pool{}
	return nil
}

func poolBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Pool) error {
	*o = Pool{}
	return nil
}

func poolAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Pool) error {
	*o = Pool{}
	return nil
}

func poolBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Pool) error {
	*o = Pool{}
	return nil
}

func poolAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Pool) error {
	*o = Pool{}
	return nil
}

func poolBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Pool) error {
	*o = Pool{}
	return nil
}

func poolAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Pool) error {
	*o = Pool{}
	return nil
}

func testPoolsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Pool{}
	o := &Pool{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, poolDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Pool object: %s", err)
	}

	AddPoolHook(boil.BeforeInsertHook, poolBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	poolBeforeInsertHooks = []PoolHook{}

	AddPoolHook(boil.AfterInsertHook, poolAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	poolAfterInsertHooks = []PoolHook{}

	AddPoolHook(boil.AfterSelectHook, poolAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	poolAfterSelectHooks = []PoolHook{}

	AddPoolHook(boil.BeforeUpdateHook, poolBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	poolBeforeUpdateHooks = []PoolHook{}

	AddPoolHook(boil.AfterUpdateHook, poolAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	poolAfterUpdateHooks = []PoolHook{}

	AddPoolHook(boil.BeforeDeleteHook, poolBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	poolBeforeDeleteHooks = []PoolHook{}

	AddPoolHook(boil.AfterDeleteHook, poolAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	poolAfterDeleteHooks = []PoolHook{}

	AddPoolHook(boil.BeforeUpsertHook, poolBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	poolBeforeUpsertHooks = []PoolHook{}

	AddPoolHook(boil.AfterUpsertHook, poolAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	poolAfterUpsertHooks = []PoolHook{}
}

func testPoolsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pool{}
	if err = randomize.Struct(seed, o, poolDBTypes, true, poolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pool struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Pools().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPoolsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pool{}
	if err = randomize.Struct(seed, o, poolDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Pool struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(poolColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Pools().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPoolToManyAssignments(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Pool
	var b, c Assignment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, poolDBTypes, true, poolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pool struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, assignmentDBTypes, false, assignmentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, assignmentDBTypes, false, assignmentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.PoolID, a.PoolID)
	queries.Assign(&c.PoolID, a.PoolID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Assignments().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.PoolID, b.PoolID) {
			bFound = true
		}
		if queries.Equal(v.PoolID, c.PoolID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PoolSlice{&a}
	if err = a.L.LoadAssignments(ctx, tx, false, (*[]*Pool)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Assignments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Assignments = nil
	if err = a.L.LoadAssignments(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Assignments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPoolToManyOrigins(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Pool
	var b, c Origin

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, poolDBTypes, true, poolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pool struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, originDBTypes, false, originColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, originDBTypes, false, originColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PoolID = a.PoolID
	c.PoolID = a.PoolID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Origins().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.PoolID == b.PoolID {
			bFound = true
		}
		if v.PoolID == c.PoolID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PoolSlice{&a}
	if err = a.L.LoadOrigins(ctx, tx, false, (*[]*Pool)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Origins); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Origins = nil
	if err = a.L.LoadOrigins(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Origins); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPoolToManyAddOpAssignments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Pool
	var b, c, d, e Assignment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, poolDBTypes, false, strmangle.SetComplement(poolPrimaryKeyColumns, poolColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Assignment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, assignmentDBTypes, false, strmangle.SetComplement(assignmentPrimaryKeyColumns, assignmentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Assignment{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAssignments(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.PoolID, first.PoolID) {
			t.Error("foreign key was wrong value", a.PoolID, first.PoolID)
		}
		if !queries.Equal(a.PoolID, second.PoolID) {
			t.Error("foreign key was wrong value", a.PoolID, second.PoolID)
		}

		if first.R.Pool != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Pool != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Assignments[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Assignments[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Assignments().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPoolToManySetOpAssignments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Pool
	var b, c, d, e Assignment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, poolDBTypes, false, strmangle.SetComplement(poolPrimaryKeyColumns, poolColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Assignment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, assignmentDBTypes, false, strmangle.SetComplement(assignmentPrimaryKeyColumns, assignmentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetAssignments(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Assignments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetAssignments(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Assignments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.PoolID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.PoolID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.PoolID, d.PoolID) {
		t.Error("foreign key was wrong value", a.PoolID, d.PoolID)
	}
	if !queries.Equal(a.PoolID, e.PoolID) {
		t.Error("foreign key was wrong value", a.PoolID, e.PoolID)
	}

	if b.R.Pool != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Pool != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Pool != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Pool != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Assignments[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Assignments[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testPoolToManyRemoveOpAssignments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Pool
	var b, c, d, e Assignment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, poolDBTypes, false, strmangle.SetComplement(poolPrimaryKeyColumns, poolColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Assignment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, assignmentDBTypes, false, strmangle.SetComplement(assignmentPrimaryKeyColumns, assignmentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddAssignments(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Assignments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveAssignments(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Assignments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.PoolID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.PoolID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Pool != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Pool != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Pool != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Pool != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Assignments) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Assignments[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Assignments[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testPoolToManyAddOpOrigins(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Pool
	var b, c, d, e Origin

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, poolDBTypes, false, strmangle.SetComplement(poolPrimaryKeyColumns, poolColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Origin{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, originDBTypes, false, strmangle.SetComplement(originPrimaryKeyColumns, originColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Origin{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOrigins(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.PoolID != first.PoolID {
			t.Error("foreign key was wrong value", a.PoolID, first.PoolID)
		}
		if a.PoolID != second.PoolID {
			t.Error("foreign key was wrong value", a.PoolID, second.PoolID)
		}

		if first.R.Pool != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Pool != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Origins[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Origins[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Origins().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPoolToOneLoadBalancerUsingLoadBalancer(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Pool
	var foreign LoadBalancer

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, poolDBTypes, false, poolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pool struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, loadBalancerDBTypes, false, loadBalancerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LoadBalancer struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.LoadBalancerID = foreign.LoadBalancerID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.LoadBalancer().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.LoadBalancerID != foreign.LoadBalancerID {
		t.Errorf("want: %v, got %v", foreign.LoadBalancerID, check.LoadBalancerID)
	}

	slice := PoolSlice{&local}
	if err = local.L.LoadLoadBalancer(ctx, tx, false, (*[]*Pool)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.LoadBalancer == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.LoadBalancer = nil
	if err = local.L.LoadLoadBalancer(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.LoadBalancer == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPoolToOneSetOpLoadBalancerUsingLoadBalancer(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Pool
	var b, c LoadBalancer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, poolDBTypes, false, strmangle.SetComplement(poolPrimaryKeyColumns, poolColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, loadBalancerDBTypes, false, strmangle.SetComplement(loadBalancerPrimaryKeyColumns, loadBalancerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, loadBalancerDBTypes, false, strmangle.SetComplement(loadBalancerPrimaryKeyColumns, loadBalancerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*LoadBalancer{&b, &c} {
		err = a.SetLoadBalancer(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.LoadBalancer != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Pools[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.LoadBalancerID != x.LoadBalancerID {
			t.Error("foreign key was wrong value", a.LoadBalancerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.LoadBalancerID))
		reflect.Indirect(reflect.ValueOf(&a.LoadBalancerID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.LoadBalancerID != x.LoadBalancerID {
			t.Error("foreign key was wrong value", a.LoadBalancerID, x.LoadBalancerID)
		}
	}
}

func testPoolsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pool{}
	if err = randomize.Struct(seed, o, poolDBTypes, true, poolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pool struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPoolsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pool{}
	if err = randomize.Struct(seed, o, poolDBTypes, true, poolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pool struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PoolSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPoolsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pool{}
	if err = randomize.Struct(seed, o, poolDBTypes, true, poolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pool struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Pools().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	poolDBTypes = map[string]string{`CreatedAt`: `timestamptz`, `UpdatedAt`: `timestamptz`, `DeletedAt`: `timestamptz`, `PoolID`: `uuid`, `LoadBalancerID`: `uuid`, `TenantID`: `uuid`, `Protocol`: `string`, `UseProxyProtocol`: `bool`, `DisplayName`: `string`}
	_           = bytes.MinRead
)

func testPoolsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(poolPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(poolAllColumns) == len(poolPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Pool{}
	if err = randomize.Struct(seed, o, poolDBTypes, true, poolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pool struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Pools().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, poolDBTypes, true, poolPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Pool struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPoolsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(poolAllColumns) == len(poolPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Pool{}
	if err = randomize.Struct(seed, o, poolDBTypes, true, poolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pool struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Pools().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, poolDBTypes, true, poolPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Pool struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(poolAllColumns, poolPrimaryKeyColumns) {
		fields = poolAllColumns
	} else {
		fields = strmangle.SetComplement(
			poolAllColumns,
			poolPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PoolSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
