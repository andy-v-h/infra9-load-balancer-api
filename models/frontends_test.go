// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

func testFrontendsUpsert(t *testing.T) {
	t.Parallel()

	if len(frontendAllColumns) == len(frontendPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Frontend{}
	if err = randomize.Struct(seed, &o, frontendDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Frontend struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Frontend: %s", err)
	}

	count, err := Frontends().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, frontendDBTypes, false, frontendPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Frontend struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Frontend: %s", err)
	}

	count, err = Frontends().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testFrontends(t *testing.T) {
	t.Parallel()

	query := Frontends()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testFrontendsSoftDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Frontend{}
	if err = randomize.Struct(seed, o, frontendDBTypes, true, frontendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Frontend struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Frontends().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFrontendsQuerySoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Frontend{}
	if err = randomize.Struct(seed, o, frontendDBTypes, true, frontendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Frontend struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Frontends().DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Frontends().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFrontendsSliceSoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Frontend{}
	if err = randomize.Struct(seed, o, frontendDBTypes, true, frontendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Frontend struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FrontendSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Frontends().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFrontendsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Frontend{}
	if err = randomize.Struct(seed, o, frontendDBTypes, true, frontendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Frontend struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Frontends().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFrontendsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Frontend{}
	if err = randomize.Struct(seed, o, frontendDBTypes, true, frontendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Frontend struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Frontends().DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Frontends().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFrontendsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Frontend{}
	if err = randomize.Struct(seed, o, frontendDBTypes, true, frontendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Frontend struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FrontendSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Frontends().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFrontendsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Frontend{}
	if err = randomize.Struct(seed, o, frontendDBTypes, true, frontendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Frontend struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := FrontendExists(ctx, tx, o.FrontendID)
	if err != nil {
		t.Errorf("Unable to check if Frontend exists: %s", err)
	}
	if !e {
		t.Errorf("Expected FrontendExists to return true, but got false.")
	}
}

func testFrontendsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Frontend{}
	if err = randomize.Struct(seed, o, frontendDBTypes, true, frontendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Frontend struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	frontendFound, err := FindFrontend(ctx, tx, o.FrontendID)
	if err != nil {
		t.Error(err)
	}

	if frontendFound == nil {
		t.Error("want a record, got nil")
	}
}

func testFrontendsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Frontend{}
	if err = randomize.Struct(seed, o, frontendDBTypes, true, frontendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Frontend struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Frontends().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testFrontendsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Frontend{}
	if err = randomize.Struct(seed, o, frontendDBTypes, true, frontendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Frontend struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Frontends().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testFrontendsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	frontendOne := &Frontend{}
	frontendTwo := &Frontend{}
	if err = randomize.Struct(seed, frontendOne, frontendDBTypes, false, frontendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Frontend struct: %s", err)
	}
	if err = randomize.Struct(seed, frontendTwo, frontendDBTypes, false, frontendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Frontend struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = frontendOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = frontendTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Frontends().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testFrontendsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	frontendOne := &Frontend{}
	frontendTwo := &Frontend{}
	if err = randomize.Struct(seed, frontendOne, frontendDBTypes, false, frontendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Frontend struct: %s", err)
	}
	if err = randomize.Struct(seed, frontendTwo, frontendDBTypes, false, frontendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Frontend struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = frontendOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = frontendTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Frontends().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func frontendBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Frontend) error {
	*o = Frontend{}
	return nil
}

func frontendAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Frontend) error {
	*o = Frontend{}
	return nil
}

func frontendAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Frontend) error {
	*o = Frontend{}
	return nil
}

func frontendBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Frontend) error {
	*o = Frontend{}
	return nil
}

func frontendAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Frontend) error {
	*o = Frontend{}
	return nil
}

func frontendBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Frontend) error {
	*o = Frontend{}
	return nil
}

func frontendAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Frontend) error {
	*o = Frontend{}
	return nil
}

func frontendBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Frontend) error {
	*o = Frontend{}
	return nil
}

func frontendAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Frontend) error {
	*o = Frontend{}
	return nil
}

func testFrontendsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Frontend{}
	o := &Frontend{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, frontendDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Frontend object: %s", err)
	}

	AddFrontendHook(boil.BeforeInsertHook, frontendBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	frontendBeforeInsertHooks = []FrontendHook{}

	AddFrontendHook(boil.AfterInsertHook, frontendAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	frontendAfterInsertHooks = []FrontendHook{}

	AddFrontendHook(boil.AfterSelectHook, frontendAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	frontendAfterSelectHooks = []FrontendHook{}

	AddFrontendHook(boil.BeforeUpdateHook, frontendBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	frontendBeforeUpdateHooks = []FrontendHook{}

	AddFrontendHook(boil.AfterUpdateHook, frontendAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	frontendAfterUpdateHooks = []FrontendHook{}

	AddFrontendHook(boil.BeforeDeleteHook, frontendBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	frontendBeforeDeleteHooks = []FrontendHook{}

	AddFrontendHook(boil.AfterDeleteHook, frontendAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	frontendAfterDeleteHooks = []FrontendHook{}

	AddFrontendHook(boil.BeforeUpsertHook, frontendBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	frontendBeforeUpsertHooks = []FrontendHook{}

	AddFrontendHook(boil.AfterUpsertHook, frontendAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	frontendAfterUpsertHooks = []FrontendHook{}
}

func testFrontendsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Frontend{}
	if err = randomize.Struct(seed, o, frontendDBTypes, true, frontendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Frontend struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Frontends().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFrontendsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Frontend{}
	if err = randomize.Struct(seed, o, frontendDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Frontend struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(frontendColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Frontends().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFrontendToManyAssignments(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Frontend
	var b, c Assignment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, frontendDBTypes, true, frontendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Frontend struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, assignmentDBTypes, false, assignmentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, assignmentDBTypes, false, assignmentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.FrontendID, a.FrontendID)
	queries.Assign(&c.FrontendID, a.FrontendID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Assignments().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.FrontendID, b.FrontendID) {
			bFound = true
		}
		if queries.Equal(v.FrontendID, c.FrontendID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := FrontendSlice{&a}
	if err = a.L.LoadAssignments(ctx, tx, false, (*[]*Frontend)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Assignments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Assignments = nil
	if err = a.L.LoadAssignments(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Assignments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testFrontendToManyAddOpAssignments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Frontend
	var b, c, d, e Assignment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, frontendDBTypes, false, strmangle.SetComplement(frontendPrimaryKeyColumns, frontendColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Assignment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, assignmentDBTypes, false, strmangle.SetComplement(assignmentPrimaryKeyColumns, assignmentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Assignment{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAssignments(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.FrontendID, first.FrontendID) {
			t.Error("foreign key was wrong value", a.FrontendID, first.FrontendID)
		}
		if !queries.Equal(a.FrontendID, second.FrontendID) {
			t.Error("foreign key was wrong value", a.FrontendID, second.FrontendID)
		}

		if first.R.Frontend != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Frontend != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Assignments[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Assignments[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Assignments().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testFrontendToManySetOpAssignments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Frontend
	var b, c, d, e Assignment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, frontendDBTypes, false, strmangle.SetComplement(frontendPrimaryKeyColumns, frontendColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Assignment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, assignmentDBTypes, false, strmangle.SetComplement(assignmentPrimaryKeyColumns, assignmentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetAssignments(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Assignments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetAssignments(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Assignments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.FrontendID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.FrontendID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.FrontendID, d.FrontendID) {
		t.Error("foreign key was wrong value", a.FrontendID, d.FrontendID)
	}
	if !queries.Equal(a.FrontendID, e.FrontendID) {
		t.Error("foreign key was wrong value", a.FrontendID, e.FrontendID)
	}

	if b.R.Frontend != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Frontend != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Frontend != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Frontend != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Assignments[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Assignments[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testFrontendToManyRemoveOpAssignments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Frontend
	var b, c, d, e Assignment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, frontendDBTypes, false, strmangle.SetComplement(frontendPrimaryKeyColumns, frontendColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Assignment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, assignmentDBTypes, false, strmangle.SetComplement(assignmentPrimaryKeyColumns, assignmentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddAssignments(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Assignments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveAssignments(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Assignments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.FrontendID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.FrontendID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Frontend != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Frontend != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Frontend != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Frontend != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Assignments) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Assignments[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Assignments[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testFrontendToOneLoadBalancerUsingLoadBalancer(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Frontend
	var foreign LoadBalancer

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, frontendDBTypes, false, frontendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Frontend struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, loadBalancerDBTypes, false, loadBalancerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LoadBalancer struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.LoadBalancerID = foreign.LoadBalancerID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.LoadBalancer().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.LoadBalancerID != foreign.LoadBalancerID {
		t.Errorf("want: %v, got %v", foreign.LoadBalancerID, check.LoadBalancerID)
	}

	slice := FrontendSlice{&local}
	if err = local.L.LoadLoadBalancer(ctx, tx, false, (*[]*Frontend)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.LoadBalancer == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.LoadBalancer = nil
	if err = local.L.LoadLoadBalancer(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.LoadBalancer == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testFrontendToOneSetOpLoadBalancerUsingLoadBalancer(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Frontend
	var b, c LoadBalancer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, frontendDBTypes, false, strmangle.SetComplement(frontendPrimaryKeyColumns, frontendColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, loadBalancerDBTypes, false, strmangle.SetComplement(loadBalancerPrimaryKeyColumns, loadBalancerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, loadBalancerDBTypes, false, strmangle.SetComplement(loadBalancerPrimaryKeyColumns, loadBalancerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*LoadBalancer{&b, &c} {
		err = a.SetLoadBalancer(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.LoadBalancer != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Frontends[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.LoadBalancerID != x.LoadBalancerID {
			t.Error("foreign key was wrong value", a.LoadBalancerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.LoadBalancerID))
		reflect.Indirect(reflect.ValueOf(&a.LoadBalancerID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.LoadBalancerID != x.LoadBalancerID {
			t.Error("foreign key was wrong value", a.LoadBalancerID, x.LoadBalancerID)
		}
	}
}

func testFrontendsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Frontend{}
	if err = randomize.Struct(seed, o, frontendDBTypes, true, frontendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Frontend struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFrontendsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Frontend{}
	if err = randomize.Struct(seed, o, frontendDBTypes, true, frontendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Frontend struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FrontendSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFrontendsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Frontend{}
	if err = randomize.Struct(seed, o, frontendDBTypes, true, frontendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Frontend struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Frontends().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	frontendDBTypes = map[string]string{`CreatedAt`: `timestamptz`, `UpdatedAt`: `timestamptz`, `DeletedAt`: `timestamptz`, `FrontendID`: `uuid`, `LoadBalancerID`: `uuid`, `TenantID`: `uuid`, `Port`: `int8`, `AfInet`: `string`, `DisplayName`: `string`}
	_               = bytes.MinRead
)

func testFrontendsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(frontendPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(frontendAllColumns) == len(frontendPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Frontend{}
	if err = randomize.Struct(seed, o, frontendDBTypes, true, frontendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Frontend struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Frontends().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, frontendDBTypes, true, frontendPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Frontend struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testFrontendsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(frontendAllColumns) == len(frontendPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Frontend{}
	if err = randomize.Struct(seed, o, frontendDBTypes, true, frontendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Frontend struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Frontends().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, frontendDBTypes, true, frontendPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Frontend struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(frontendAllColumns, frontendPrimaryKeyColumns) {
		fields = frontendAllColumns
	} else {
		fields = strmangle.SetComplement(
			frontendAllColumns,
			frontendPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := FrontendSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
