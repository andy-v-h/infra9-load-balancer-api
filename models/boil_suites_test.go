// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Assignments", testAssignments)
	t.Run("Frontends", testFrontends)
	t.Run("GooseDBVersions", testGooseDBVersions)
	t.Run("LoadBalancers", testLoadBalancers)
	t.Run("Locations", testLocations)
	t.Run("Origins", testOrigins)
	t.Run("Pools", testPools)
}

func TestSoftDelete(t *testing.T) {
	t.Run("Assignments", testAssignmentsSoftDelete)
	t.Run("Frontends", testFrontendsSoftDelete)
	t.Run("LoadBalancers", testLoadBalancersSoftDelete)
	t.Run("Locations", testLocationsSoftDelete)
	t.Run("Origins", testOriginsSoftDelete)
	t.Run("Pools", testPoolsSoftDelete)
}

func TestQuerySoftDeleteAll(t *testing.T) {
	t.Run("Assignments", testAssignmentsQuerySoftDeleteAll)
	t.Run("Frontends", testFrontendsQuerySoftDeleteAll)
	t.Run("LoadBalancers", testLoadBalancersQuerySoftDeleteAll)
	t.Run("Locations", testLocationsQuerySoftDeleteAll)
	t.Run("Origins", testOriginsQuerySoftDeleteAll)
	t.Run("Pools", testPoolsQuerySoftDeleteAll)
}

func TestSliceSoftDeleteAll(t *testing.T) {
	t.Run("Assignments", testAssignmentsSliceSoftDeleteAll)
	t.Run("Frontends", testFrontendsSliceSoftDeleteAll)
	t.Run("LoadBalancers", testLoadBalancersSliceSoftDeleteAll)
	t.Run("Locations", testLocationsSliceSoftDeleteAll)
	t.Run("Origins", testOriginsSliceSoftDeleteAll)
	t.Run("Pools", testPoolsSliceSoftDeleteAll)
}

func TestDelete(t *testing.T) {
	t.Run("Assignments", testAssignmentsDelete)
	t.Run("Frontends", testFrontendsDelete)
	t.Run("GooseDBVersions", testGooseDBVersionsDelete)
	t.Run("LoadBalancers", testLoadBalancersDelete)
	t.Run("Locations", testLocationsDelete)
	t.Run("Origins", testOriginsDelete)
	t.Run("Pools", testPoolsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Assignments", testAssignmentsQueryDeleteAll)
	t.Run("Frontends", testFrontendsQueryDeleteAll)
	t.Run("GooseDBVersions", testGooseDBVersionsQueryDeleteAll)
	t.Run("LoadBalancers", testLoadBalancersQueryDeleteAll)
	t.Run("Locations", testLocationsQueryDeleteAll)
	t.Run("Origins", testOriginsQueryDeleteAll)
	t.Run("Pools", testPoolsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Assignments", testAssignmentsSliceDeleteAll)
	t.Run("Frontends", testFrontendsSliceDeleteAll)
	t.Run("GooseDBVersions", testGooseDBVersionsSliceDeleteAll)
	t.Run("LoadBalancers", testLoadBalancersSliceDeleteAll)
	t.Run("Locations", testLocationsSliceDeleteAll)
	t.Run("Origins", testOriginsSliceDeleteAll)
	t.Run("Pools", testPoolsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Assignments", testAssignmentsExists)
	t.Run("Frontends", testFrontendsExists)
	t.Run("GooseDBVersions", testGooseDBVersionsExists)
	t.Run("LoadBalancers", testLoadBalancersExists)
	t.Run("Locations", testLocationsExists)
	t.Run("Origins", testOriginsExists)
	t.Run("Pools", testPoolsExists)
}

func TestFind(t *testing.T) {
	t.Run("Assignments", testAssignmentsFind)
	t.Run("Frontends", testFrontendsFind)
	t.Run("GooseDBVersions", testGooseDBVersionsFind)
	t.Run("LoadBalancers", testLoadBalancersFind)
	t.Run("Locations", testLocationsFind)
	t.Run("Origins", testOriginsFind)
	t.Run("Pools", testPoolsFind)
}

func TestBind(t *testing.T) {
	t.Run("Assignments", testAssignmentsBind)
	t.Run("Frontends", testFrontendsBind)
	t.Run("GooseDBVersions", testGooseDBVersionsBind)
	t.Run("LoadBalancers", testLoadBalancersBind)
	t.Run("Locations", testLocationsBind)
	t.Run("Origins", testOriginsBind)
	t.Run("Pools", testPoolsBind)
}

func TestOne(t *testing.T) {
	t.Run("Assignments", testAssignmentsOne)
	t.Run("Frontends", testFrontendsOne)
	t.Run("GooseDBVersions", testGooseDBVersionsOne)
	t.Run("LoadBalancers", testLoadBalancersOne)
	t.Run("Locations", testLocationsOne)
	t.Run("Origins", testOriginsOne)
	t.Run("Pools", testPoolsOne)
}

func TestAll(t *testing.T) {
	t.Run("Assignments", testAssignmentsAll)
	t.Run("Frontends", testFrontendsAll)
	t.Run("GooseDBVersions", testGooseDBVersionsAll)
	t.Run("LoadBalancers", testLoadBalancersAll)
	t.Run("Locations", testLocationsAll)
	t.Run("Origins", testOriginsAll)
	t.Run("Pools", testPoolsAll)
}

func TestCount(t *testing.T) {
	t.Run("Assignments", testAssignmentsCount)
	t.Run("Frontends", testFrontendsCount)
	t.Run("GooseDBVersions", testGooseDBVersionsCount)
	t.Run("LoadBalancers", testLoadBalancersCount)
	t.Run("Locations", testLocationsCount)
	t.Run("Origins", testOriginsCount)
	t.Run("Pools", testPoolsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Assignments", testAssignmentsHooks)
	t.Run("Frontends", testFrontendsHooks)
	t.Run("GooseDBVersions", testGooseDBVersionsHooks)
	t.Run("LoadBalancers", testLoadBalancersHooks)
	t.Run("Locations", testLocationsHooks)
	t.Run("Origins", testOriginsHooks)
	t.Run("Pools", testPoolsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Assignments", testAssignmentsInsert)
	t.Run("Assignments", testAssignmentsInsertWhitelist)
	t.Run("Frontends", testFrontendsInsert)
	t.Run("Frontends", testFrontendsInsertWhitelist)
	t.Run("GooseDBVersions", testGooseDBVersionsInsert)
	t.Run("GooseDBVersions", testGooseDBVersionsInsertWhitelist)
	t.Run("LoadBalancers", testLoadBalancersInsert)
	t.Run("LoadBalancers", testLoadBalancersInsertWhitelist)
	t.Run("Locations", testLocationsInsert)
	t.Run("Locations", testLocationsInsertWhitelist)
	t.Run("Origins", testOriginsInsert)
	t.Run("Origins", testOriginsInsertWhitelist)
	t.Run("Pools", testPoolsInsert)
	t.Run("Pools", testPoolsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("AssignmentToPoolUsingPool", testAssignmentToOnePoolUsingPool)
	t.Run("AssignmentToLoadBalancerUsingLoadBalancer", testAssignmentToOneLoadBalancerUsingLoadBalancer)
	t.Run("AssignmentToFrontendUsingFrontend", testAssignmentToOneFrontendUsingFrontend)
	t.Run("FrontendToLoadBalancerUsingLoadBalancer", testFrontendToOneLoadBalancerUsingLoadBalancer)
	t.Run("LoadBalancerToLocationUsingLocation", testLoadBalancerToOneLocationUsingLocation)
	t.Run("OriginToPoolUsingPool", testOriginToOnePoolUsingPool)
	t.Run("PoolToLoadBalancerUsingLoadBalancer", testPoolToOneLoadBalancerUsingLoadBalancer)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("FrontendToAssignments", testFrontendToManyAssignments)
	t.Run("LoadBalancerToAssignments", testLoadBalancerToManyAssignments)
	t.Run("LoadBalancerToFrontends", testLoadBalancerToManyFrontends)
	t.Run("LoadBalancerToPools", testLoadBalancerToManyPools)
	t.Run("LocationToLoadBalancers", testLocationToManyLoadBalancers)
	t.Run("PoolToAssignments", testPoolToManyAssignments)
	t.Run("PoolToOrigins", testPoolToManyOrigins)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("AssignmentToPoolUsingAssignments", testAssignmentToOneSetOpPoolUsingPool)
	t.Run("AssignmentToLoadBalancerUsingAssignments", testAssignmentToOneSetOpLoadBalancerUsingLoadBalancer)
	t.Run("AssignmentToFrontendUsingAssignments", testAssignmentToOneSetOpFrontendUsingFrontend)
	t.Run("FrontendToLoadBalancerUsingFrontends", testFrontendToOneSetOpLoadBalancerUsingLoadBalancer)
	t.Run("LoadBalancerToLocationUsingLoadBalancers", testLoadBalancerToOneSetOpLocationUsingLocation)
	t.Run("OriginToPoolUsingOrigins", testOriginToOneSetOpPoolUsingPool)
	t.Run("PoolToLoadBalancerUsingPools", testPoolToOneSetOpLoadBalancerUsingLoadBalancer)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("AssignmentToPoolUsingAssignments", testAssignmentToOneRemoveOpPoolUsingPool)
	t.Run("AssignmentToLoadBalancerUsingAssignments", testAssignmentToOneRemoveOpLoadBalancerUsingLoadBalancer)
	t.Run("AssignmentToFrontendUsingAssignments", testAssignmentToOneRemoveOpFrontendUsingFrontend)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("FrontendToAssignments", testFrontendToManyAddOpAssignments)
	t.Run("LoadBalancerToAssignments", testLoadBalancerToManyAddOpAssignments)
	t.Run("LoadBalancerToFrontends", testLoadBalancerToManyAddOpFrontends)
	t.Run("LoadBalancerToPools", testLoadBalancerToManyAddOpPools)
	t.Run("LocationToLoadBalancers", testLocationToManyAddOpLoadBalancers)
	t.Run("PoolToAssignments", testPoolToManyAddOpAssignments)
	t.Run("PoolToOrigins", testPoolToManyAddOpOrigins)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("FrontendToAssignments", testFrontendToManySetOpAssignments)
	t.Run("LoadBalancerToAssignments", testLoadBalancerToManySetOpAssignments)
	t.Run("PoolToAssignments", testPoolToManySetOpAssignments)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("FrontendToAssignments", testFrontendToManyRemoveOpAssignments)
	t.Run("LoadBalancerToAssignments", testLoadBalancerToManyRemoveOpAssignments)
	t.Run("PoolToAssignments", testPoolToManyRemoveOpAssignments)
}

func TestReload(t *testing.T) {
	t.Run("Assignments", testAssignmentsReload)
	t.Run("Frontends", testFrontendsReload)
	t.Run("GooseDBVersions", testGooseDBVersionsReload)
	t.Run("LoadBalancers", testLoadBalancersReload)
	t.Run("Locations", testLocationsReload)
	t.Run("Origins", testOriginsReload)
	t.Run("Pools", testPoolsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Assignments", testAssignmentsReloadAll)
	t.Run("Frontends", testFrontendsReloadAll)
	t.Run("GooseDBVersions", testGooseDBVersionsReloadAll)
	t.Run("LoadBalancers", testLoadBalancersReloadAll)
	t.Run("Locations", testLocationsReloadAll)
	t.Run("Origins", testOriginsReloadAll)
	t.Run("Pools", testPoolsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Assignments", testAssignmentsSelect)
	t.Run("Frontends", testFrontendsSelect)
	t.Run("GooseDBVersions", testGooseDBVersionsSelect)
	t.Run("LoadBalancers", testLoadBalancersSelect)
	t.Run("Locations", testLocationsSelect)
	t.Run("Origins", testOriginsSelect)
	t.Run("Pools", testPoolsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Assignments", testAssignmentsUpdate)
	t.Run("Frontends", testFrontendsUpdate)
	t.Run("GooseDBVersions", testGooseDBVersionsUpdate)
	t.Run("LoadBalancers", testLoadBalancersUpdate)
	t.Run("Locations", testLocationsUpdate)
	t.Run("Origins", testOriginsUpdate)
	t.Run("Pools", testPoolsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Assignments", testAssignmentsSliceUpdateAll)
	t.Run("Frontends", testFrontendsSliceUpdateAll)
	t.Run("GooseDBVersions", testGooseDBVersionsSliceUpdateAll)
	t.Run("LoadBalancers", testLoadBalancersSliceUpdateAll)
	t.Run("Locations", testLocationsSliceUpdateAll)
	t.Run("Origins", testOriginsSliceUpdateAll)
	t.Run("Pools", testPoolsSliceUpdateAll)
}
