// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// OriginMetadatum is an object representing the database table.
type OriginMetadatum struct {
	MetadataID string     `query:"metadata_id" param:"metadata_id" boil:"metadata_id" json:"metadata_id" toml:"metadata_id" yaml:"metadata_id"`
	OriginID   string     `query:"origin_id" param:"origin_id" boil:"origin_id" json:"origin_id" toml:"origin_id" yaml:"origin_id"`
	Namespace  string     `query:"namespace" param:"namespace" boil:"namespace" json:"namespace" toml:"namespace" yaml:"namespace"`
	Data       types.JSON `query:"data" param:"data" boil:"data" json:"data" toml:"data" yaml:"data"`
	CreatedAt  time.Time  `query:"created_at" param:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt  time.Time  `query:"updated_at" param:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt  null.Time  `query:"deleted_at" param:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *originMetadatumR `query:"-" param:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L originMetadatumL  `query:"-" param:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OriginMetadatumColumns = struct {
	MetadataID string
	OriginID   string
	Namespace  string
	Data       string
	CreatedAt  string
	UpdatedAt  string
	DeletedAt  string
}{
	MetadataID: "metadata_id",
	OriginID:   "origin_id",
	Namespace:  "namespace",
	Data:       "data",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
	DeletedAt:  "deleted_at",
}

var OriginMetadatumTableColumns = struct {
	MetadataID string
	OriginID   string
	Namespace  string
	Data       string
	CreatedAt  string
	UpdatedAt  string
	DeletedAt  string
}{
	MetadataID: "origin_metadata.metadata_id",
	OriginID:   "origin_metadata.origin_id",
	Namespace:  "origin_metadata.namespace",
	Data:       "origin_metadata.data",
	CreatedAt:  "origin_metadata.created_at",
	UpdatedAt:  "origin_metadata.updated_at",
	DeletedAt:  "origin_metadata.deleted_at",
}

// Generated where

var OriginMetadatumWhere = struct {
	MetadataID whereHelperstring
	OriginID   whereHelperstring
	Namespace  whereHelperstring
	Data       whereHelpertypes_JSON
	CreatedAt  whereHelpertime_Time
	UpdatedAt  whereHelpertime_Time
	DeletedAt  whereHelpernull_Time
}{
	MetadataID: whereHelperstring{field: "\"origin_metadata\".\"metadata_id\""},
	OriginID:   whereHelperstring{field: "\"origin_metadata\".\"origin_id\""},
	Namespace:  whereHelperstring{field: "\"origin_metadata\".\"namespace\""},
	Data:       whereHelpertypes_JSON{field: "\"origin_metadata\".\"data\""},
	CreatedAt:  whereHelpertime_Time{field: "\"origin_metadata\".\"created_at\""},
	UpdatedAt:  whereHelpertime_Time{field: "\"origin_metadata\".\"updated_at\""},
	DeletedAt:  whereHelpernull_Time{field: "\"origin_metadata\".\"deleted_at\""},
}

// OriginMetadatumRels is where relationship names are stored.
var OriginMetadatumRels = struct {
	Origin string
}{
	Origin: "Origin",
}

// originMetadatumR is where relationships are stored.
type originMetadatumR struct {
	Origin *Origin `query:"Origin" param:"Origin" boil:"Origin" json:"Origin" toml:"Origin" yaml:"Origin"`
}

// NewStruct creates a new relationship struct
func (*originMetadatumR) NewStruct() *originMetadatumR {
	return &originMetadatumR{}
}

func (r *originMetadatumR) GetOrigin() *Origin {
	if r == nil {
		return nil
	}
	return r.Origin
}

// originMetadatumL is where Load methods for each relationship are stored.
type originMetadatumL struct{}

var (
	originMetadatumAllColumns            = []string{"metadata_id", "origin_id", "namespace", "data", "created_at", "updated_at", "deleted_at"}
	originMetadatumColumnsWithoutDefault = []string{"origin_id", "namespace", "data"}
	originMetadatumColumnsWithDefault    = []string{"metadata_id", "created_at", "updated_at", "deleted_at"}
	originMetadatumPrimaryKeyColumns     = []string{"metadata_id"}
	originMetadatumGeneratedColumns      = []string{}
)

type (
	// OriginMetadatumSlice is an alias for a slice of pointers to OriginMetadatum.
	// This should almost always be used instead of []OriginMetadatum.
	OriginMetadatumSlice []*OriginMetadatum
	// OriginMetadatumHook is the signature for custom OriginMetadatum hook methods
	OriginMetadatumHook func(context.Context, boil.ContextExecutor, *OriginMetadatum) error

	originMetadatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	originMetadatumType                 = reflect.TypeOf(&OriginMetadatum{})
	originMetadatumMapping              = queries.MakeStructMapping(originMetadatumType)
	originMetadatumPrimaryKeyMapping, _ = queries.BindMapping(originMetadatumType, originMetadatumMapping, originMetadatumPrimaryKeyColumns)
	originMetadatumInsertCacheMut       sync.RWMutex
	originMetadatumInsertCache          = make(map[string]insertCache)
	originMetadatumUpdateCacheMut       sync.RWMutex
	originMetadatumUpdateCache          = make(map[string]updateCache)
	originMetadatumUpsertCacheMut       sync.RWMutex
	originMetadatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var originMetadatumAfterSelectHooks []OriginMetadatumHook

var originMetadatumBeforeInsertHooks []OriginMetadatumHook
var originMetadatumAfterInsertHooks []OriginMetadatumHook

var originMetadatumBeforeUpdateHooks []OriginMetadatumHook
var originMetadatumAfterUpdateHooks []OriginMetadatumHook

var originMetadatumBeforeDeleteHooks []OriginMetadatumHook
var originMetadatumAfterDeleteHooks []OriginMetadatumHook

var originMetadatumBeforeUpsertHooks []OriginMetadatumHook
var originMetadatumAfterUpsertHooks []OriginMetadatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OriginMetadatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originMetadatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OriginMetadatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originMetadatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OriginMetadatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originMetadatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OriginMetadatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originMetadatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OriginMetadatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originMetadatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OriginMetadatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originMetadatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OriginMetadatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originMetadatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OriginMetadatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originMetadatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OriginMetadatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range originMetadatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOriginMetadatumHook registers your hook function for all future operations.
func AddOriginMetadatumHook(hookPoint boil.HookPoint, originMetadatumHook OriginMetadatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		originMetadatumAfterSelectHooks = append(originMetadatumAfterSelectHooks, originMetadatumHook)
	case boil.BeforeInsertHook:
		originMetadatumBeforeInsertHooks = append(originMetadatumBeforeInsertHooks, originMetadatumHook)
	case boil.AfterInsertHook:
		originMetadatumAfterInsertHooks = append(originMetadatumAfterInsertHooks, originMetadatumHook)
	case boil.BeforeUpdateHook:
		originMetadatumBeforeUpdateHooks = append(originMetadatumBeforeUpdateHooks, originMetadatumHook)
	case boil.AfterUpdateHook:
		originMetadatumAfterUpdateHooks = append(originMetadatumAfterUpdateHooks, originMetadatumHook)
	case boil.BeforeDeleteHook:
		originMetadatumBeforeDeleteHooks = append(originMetadatumBeforeDeleteHooks, originMetadatumHook)
	case boil.AfterDeleteHook:
		originMetadatumAfterDeleteHooks = append(originMetadatumAfterDeleteHooks, originMetadatumHook)
	case boil.BeforeUpsertHook:
		originMetadatumBeforeUpsertHooks = append(originMetadatumBeforeUpsertHooks, originMetadatumHook)
	case boil.AfterUpsertHook:
		originMetadatumAfterUpsertHooks = append(originMetadatumAfterUpsertHooks, originMetadatumHook)
	}
}

// One returns a single originMetadatum record from the query.
func (q originMetadatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OriginMetadatum, error) {
	o := &OriginMetadatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to execute a one query for origin_metadata")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OriginMetadatum records from the query.
func (q originMetadatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (OriginMetadatumSlice, error) {
	var o []*OriginMetadatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to OriginMetadatum slice")
	}

	if len(originMetadatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OriginMetadatum records in the query.
func (q originMetadatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count origin_metadata rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q originMetadatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if origin_metadata exists")
	}

	return count > 0, nil
}

// Origin pointed to by the foreign key.
func (o *OriginMetadatum) Origin(mods ...qm.QueryMod) originQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"origin_id\" = ?", o.OriginID),
	}

	queryMods = append(queryMods, mods...)

	return Origins(queryMods...)
}

// LoadOrigin allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (originMetadatumL) LoadOrigin(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOriginMetadatum interface{}, mods queries.Applicator) error {
	var slice []*OriginMetadatum
	var object *OriginMetadatum

	if singular {
		var ok bool
		object, ok = maybeOriginMetadatum.(*OriginMetadatum)
		if !ok {
			object = new(OriginMetadatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOriginMetadatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOriginMetadatum))
			}
		}
	} else {
		s, ok := maybeOriginMetadatum.(*[]*OriginMetadatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOriginMetadatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOriginMetadatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &originMetadatumR{}
		}
		args = append(args, object.OriginID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &originMetadatumR{}
			}

			for _, a := range args {
				if a == obj.OriginID {
					continue Outer
				}
			}

			args = append(args, obj.OriginID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`origins`),
		qm.WhereIn(`origins.origin_id in ?`, args...),
		qmhelper.WhereIsNull(`origins.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Origin")
	}

	var resultSlice []*Origin
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Origin")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for origins")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for origins")
	}

	if len(originAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Origin = foreign
		if foreign.R == nil {
			foreign.R = &originR{}
		}
		foreign.R.OriginMetadata = append(foreign.R.OriginMetadata, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OriginID == foreign.OriginID {
				local.R.Origin = foreign
				if foreign.R == nil {
					foreign.R = &originR{}
				}
				foreign.R.OriginMetadata = append(foreign.R.OriginMetadata, local)
				break
			}
		}
	}

	return nil
}

// SetOrigin of the originMetadatum to the related item.
// Sets o.R.Origin to related.
// Adds o to related.R.OriginMetadata.
func (o *OriginMetadatum) SetOrigin(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Origin) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"origin_metadata\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"origin_id"}),
		strmangle.WhereClause("\"", "\"", 2, originMetadatumPrimaryKeyColumns),
	)
	values := []interface{}{related.OriginID, o.MetadataID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OriginID = related.OriginID
	if o.R == nil {
		o.R = &originMetadatumR{
			Origin: related,
		}
	} else {
		o.R.Origin = related
	}

	if related.R == nil {
		related.R = &originR{
			OriginMetadata: OriginMetadatumSlice{o},
		}
	} else {
		related.R.OriginMetadata = append(related.R.OriginMetadata, o)
	}

	return nil
}

// OriginMetadata retrieves all the records using an executor.
func OriginMetadata(mods ...qm.QueryMod) originMetadatumQuery {
	mods = append(mods, qm.From("\"origin_metadata\""), qmhelper.WhereIsNull("\"origin_metadata\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"origin_metadata\".*"})
	}

	return originMetadatumQuery{q}
}

// FindOriginMetadatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOriginMetadatum(ctx context.Context, exec boil.ContextExecutor, metadataID string, selectCols ...string) (*OriginMetadatum, error) {
	originMetadatumObj := &OriginMetadatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"origin_metadata\" where \"metadata_id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, metadataID)

	err := q.Bind(ctx, exec, originMetadatumObj)
	if err != nil {
		return nil, errors.Wrap(err, "models: unable to select from origin_metadata")
	}

	if err = originMetadatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return originMetadatumObj, err
	}

	return originMetadatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OriginMetadatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no origin_metadata provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(originMetadatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	originMetadatumInsertCacheMut.RLock()
	cache, cached := originMetadatumInsertCache[key]
	originMetadatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			originMetadatumAllColumns,
			originMetadatumColumnsWithDefault,
			originMetadatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(originMetadatumType, originMetadatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(originMetadatumType, originMetadatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"origin_metadata\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"origin_metadata\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into origin_metadata")
	}

	if !cached {
		originMetadatumInsertCacheMut.Lock()
		originMetadatumInsertCache[key] = cache
		originMetadatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OriginMetadatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OriginMetadatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	originMetadatumUpdateCacheMut.RLock()
	cache, cached := originMetadatumUpdateCache[key]
	originMetadatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			originMetadatumAllColumns,
			originMetadatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update origin_metadata, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"origin_metadata\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, originMetadatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(originMetadatumType, originMetadatumMapping, append(wl, originMetadatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update origin_metadata row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for origin_metadata")
	}

	if !cached {
		originMetadatumUpdateCacheMut.Lock()
		originMetadatumUpdateCache[key] = cache
		originMetadatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q originMetadatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for origin_metadata")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for origin_metadata")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OriginMetadatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), originMetadatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"origin_metadata\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, originMetadatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in originMetadatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all originMetadatum")
	}
	return rowsAff, nil
}

// Delete deletes a single OriginMetadatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OriginMetadatum) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OriginMetadatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), originMetadatumPrimaryKeyMapping)
		sql = "DELETE FROM \"origin_metadata\" WHERE \"metadata_id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"origin_metadata\" SET %s WHERE \"metadata_id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(originMetadatumType, originMetadatumMapping, append(wl, originMetadatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from origin_metadata")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for origin_metadata")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q originMetadatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no originMetadatumQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from origin_metadata")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for origin_metadata")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OriginMetadatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(originMetadatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), originMetadatumPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"origin_metadata\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, originMetadatumPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), originMetadatumPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"origin_metadata\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, originMetadatumPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from originMetadatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for origin_metadata")
	}

	if len(originMetadatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OriginMetadatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOriginMetadatum(ctx, exec, o.MetadataID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OriginMetadatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OriginMetadatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), originMetadatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"origin_metadata\".* FROM \"origin_metadata\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, originMetadatumPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OriginMetadatumSlice")
	}

	*o = slice

	return nil
}

// OriginMetadatumExists checks if the OriginMetadatum row exists.
func OriginMetadatumExists(ctx context.Context, exec boil.ContextExecutor, metadataID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"origin_metadata\" where \"metadata_id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, metadataID)
	}
	row := exec.QueryRowContext(ctx, sql, metadataID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if origin_metadata exists")
	}

	return exists, nil
}

// Exists checks if the OriginMetadatum row exists.
func (o *OriginMetadatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OriginMetadatumExists(ctx, exec, o.MetadataID)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OriginMetadatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no origin_metadata provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(originMetadatumColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	originMetadatumUpsertCacheMut.RLock()
	cache, cached := originMetadatumUpsertCache[key]
	originMetadatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			originMetadatumAllColumns,
			originMetadatumColumnsWithDefault,
			originMetadatumColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			originMetadatumAllColumns,
			originMetadatumPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert origin_metadata, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(originMetadatumPrimaryKeyColumns))
			copy(conflict, originMetadatumPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"origin_metadata\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(originMetadatumType, originMetadatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(originMetadatumType, originMetadatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert origin_metadata")
	}

	if !cached {
		originMetadatumUpsertCacheMut.Lock()
		originMetadatumUpsertCache[key] = cache
		originMetadatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
