// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

func testAssignmentsUpsert(t *testing.T) {
	t.Parallel()

	if len(assignmentAllColumns) == len(assignmentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Assignment{}
	if err = randomize.Struct(seed, &o, assignmentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Assignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Assignment: %s", err)
	}

	count, err := Assignments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, assignmentDBTypes, false, assignmentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Assignment struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Assignment: %s", err)
	}

	count, err = Assignments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAssignments(t *testing.T) {
	t.Parallel()

	query := Assignments()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAssignmentsSoftDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Assignment{}
	if err = randomize.Struct(seed, o, assignmentDBTypes, true, assignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Assignments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAssignmentsQuerySoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Assignment{}
	if err = randomize.Struct(seed, o, assignmentDBTypes, true, assignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Assignments().DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Assignments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAssignmentsSliceSoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Assignment{}
	if err = randomize.Struct(seed, o, assignmentDBTypes, true, assignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AssignmentSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Assignments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAssignmentsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Assignment{}
	if err = randomize.Struct(seed, o, assignmentDBTypes, true, assignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Assignments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAssignmentsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Assignment{}
	if err = randomize.Struct(seed, o, assignmentDBTypes, true, assignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Assignments().DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Assignments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAssignmentsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Assignment{}
	if err = randomize.Struct(seed, o, assignmentDBTypes, true, assignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AssignmentSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Assignments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAssignmentsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Assignment{}
	if err = randomize.Struct(seed, o, assignmentDBTypes, true, assignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AssignmentExists(ctx, tx, o.AssignmentID)
	if err != nil {
		t.Errorf("Unable to check if Assignment exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AssignmentExists to return true, but got false.")
	}
}

func testAssignmentsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Assignment{}
	if err = randomize.Struct(seed, o, assignmentDBTypes, true, assignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	assignmentFound, err := FindAssignment(ctx, tx, o.AssignmentID)
	if err != nil {
		t.Error(err)
	}

	if assignmentFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAssignmentsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Assignment{}
	if err = randomize.Struct(seed, o, assignmentDBTypes, true, assignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Assignments().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAssignmentsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Assignment{}
	if err = randomize.Struct(seed, o, assignmentDBTypes, true, assignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Assignments().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAssignmentsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	assignmentOne := &Assignment{}
	assignmentTwo := &Assignment{}
	if err = randomize.Struct(seed, assignmentOne, assignmentDBTypes, false, assignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assignment struct: %s", err)
	}
	if err = randomize.Struct(seed, assignmentTwo, assignmentDBTypes, false, assignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = assignmentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = assignmentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Assignments().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAssignmentsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	assignmentOne := &Assignment{}
	assignmentTwo := &Assignment{}
	if err = randomize.Struct(seed, assignmentOne, assignmentDBTypes, false, assignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assignment struct: %s", err)
	}
	if err = randomize.Struct(seed, assignmentTwo, assignmentDBTypes, false, assignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = assignmentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = assignmentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Assignments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func assignmentBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Assignment) error {
	*o = Assignment{}
	return nil
}

func assignmentAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Assignment) error {
	*o = Assignment{}
	return nil
}

func assignmentAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Assignment) error {
	*o = Assignment{}
	return nil
}

func assignmentBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Assignment) error {
	*o = Assignment{}
	return nil
}

func assignmentAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Assignment) error {
	*o = Assignment{}
	return nil
}

func assignmentBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Assignment) error {
	*o = Assignment{}
	return nil
}

func assignmentAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Assignment) error {
	*o = Assignment{}
	return nil
}

func assignmentBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Assignment) error {
	*o = Assignment{}
	return nil
}

func assignmentAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Assignment) error {
	*o = Assignment{}
	return nil
}

func testAssignmentsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Assignment{}
	o := &Assignment{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, assignmentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Assignment object: %s", err)
	}

	AddAssignmentHook(boil.BeforeInsertHook, assignmentBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	assignmentBeforeInsertHooks = []AssignmentHook{}

	AddAssignmentHook(boil.AfterInsertHook, assignmentAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	assignmentAfterInsertHooks = []AssignmentHook{}

	AddAssignmentHook(boil.AfterSelectHook, assignmentAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	assignmentAfterSelectHooks = []AssignmentHook{}

	AddAssignmentHook(boil.BeforeUpdateHook, assignmentBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	assignmentBeforeUpdateHooks = []AssignmentHook{}

	AddAssignmentHook(boil.AfterUpdateHook, assignmentAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	assignmentAfterUpdateHooks = []AssignmentHook{}

	AddAssignmentHook(boil.BeforeDeleteHook, assignmentBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	assignmentBeforeDeleteHooks = []AssignmentHook{}

	AddAssignmentHook(boil.AfterDeleteHook, assignmentAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	assignmentAfterDeleteHooks = []AssignmentHook{}

	AddAssignmentHook(boil.BeforeUpsertHook, assignmentBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	assignmentBeforeUpsertHooks = []AssignmentHook{}

	AddAssignmentHook(boil.AfterUpsertHook, assignmentAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	assignmentAfterUpsertHooks = []AssignmentHook{}
}

func testAssignmentsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Assignment{}
	if err = randomize.Struct(seed, o, assignmentDBTypes, true, assignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Assignments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAssignmentsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Assignment{}
	if err = randomize.Struct(seed, o, assignmentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Assignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(assignmentColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Assignments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAssignmentToOnePoolUsingPool(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Assignment
	var foreign Pool

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, assignmentDBTypes, true, assignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assignment struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, poolDBTypes, false, poolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pool struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.PoolID, foreign.PoolID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Pool().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.PoolID, foreign.PoolID) {
		t.Errorf("want: %v, got %v", foreign.PoolID, check.PoolID)
	}

	slice := AssignmentSlice{&local}
	if err = local.L.LoadPool(ctx, tx, false, (*[]*Assignment)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Pool == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Pool = nil
	if err = local.L.LoadPool(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Pool == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAssignmentToOneLoadBalancerUsingLoadBalancer(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Assignment
	var foreign LoadBalancer

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, assignmentDBTypes, true, assignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assignment struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, loadBalancerDBTypes, false, loadBalancerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LoadBalancer struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.LoadBalancerID, foreign.LoadBalancerID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.LoadBalancer().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.LoadBalancerID, foreign.LoadBalancerID) {
		t.Errorf("want: %v, got %v", foreign.LoadBalancerID, check.LoadBalancerID)
	}

	slice := AssignmentSlice{&local}
	if err = local.L.LoadLoadBalancer(ctx, tx, false, (*[]*Assignment)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.LoadBalancer == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.LoadBalancer = nil
	if err = local.L.LoadLoadBalancer(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.LoadBalancer == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAssignmentToOneFrontendUsingFrontend(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Assignment
	var foreign Frontend

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, assignmentDBTypes, true, assignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assignment struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, frontendDBTypes, false, frontendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Frontend struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.FrontendID, foreign.FrontendID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Frontend().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.FrontendID, foreign.FrontendID) {
		t.Errorf("want: %v, got %v", foreign.FrontendID, check.FrontendID)
	}

	slice := AssignmentSlice{&local}
	if err = local.L.LoadFrontend(ctx, tx, false, (*[]*Assignment)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Frontend == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Frontend = nil
	if err = local.L.LoadFrontend(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Frontend == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAssignmentToOneSetOpPoolUsingPool(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Assignment
	var b, c Pool

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assignmentDBTypes, false, strmangle.SetComplement(assignmentPrimaryKeyColumns, assignmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, poolDBTypes, false, strmangle.SetComplement(poolPrimaryKeyColumns, poolColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, poolDBTypes, false, strmangle.SetComplement(poolPrimaryKeyColumns, poolColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Pool{&b, &c} {
		err = a.SetPool(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Pool != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Assignments[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.PoolID, x.PoolID) {
			t.Error("foreign key was wrong value", a.PoolID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PoolID))
		reflect.Indirect(reflect.ValueOf(&a.PoolID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.PoolID, x.PoolID) {
			t.Error("foreign key was wrong value", a.PoolID, x.PoolID)
		}
	}
}

func testAssignmentToOneRemoveOpPoolUsingPool(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Assignment
	var b Pool

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assignmentDBTypes, false, strmangle.SetComplement(assignmentPrimaryKeyColumns, assignmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, poolDBTypes, false, strmangle.SetComplement(poolPrimaryKeyColumns, poolColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetPool(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemovePool(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Pool().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Pool != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.PoolID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Assignments) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testAssignmentToOneSetOpLoadBalancerUsingLoadBalancer(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Assignment
	var b, c LoadBalancer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assignmentDBTypes, false, strmangle.SetComplement(assignmentPrimaryKeyColumns, assignmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, loadBalancerDBTypes, false, strmangle.SetComplement(loadBalancerPrimaryKeyColumns, loadBalancerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, loadBalancerDBTypes, false, strmangle.SetComplement(loadBalancerPrimaryKeyColumns, loadBalancerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*LoadBalancer{&b, &c} {
		err = a.SetLoadBalancer(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.LoadBalancer != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Assignments[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.LoadBalancerID, x.LoadBalancerID) {
			t.Error("foreign key was wrong value", a.LoadBalancerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.LoadBalancerID))
		reflect.Indirect(reflect.ValueOf(&a.LoadBalancerID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.LoadBalancerID, x.LoadBalancerID) {
			t.Error("foreign key was wrong value", a.LoadBalancerID, x.LoadBalancerID)
		}
	}
}

func testAssignmentToOneRemoveOpLoadBalancerUsingLoadBalancer(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Assignment
	var b LoadBalancer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assignmentDBTypes, false, strmangle.SetComplement(assignmentPrimaryKeyColumns, assignmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, loadBalancerDBTypes, false, strmangle.SetComplement(loadBalancerPrimaryKeyColumns, loadBalancerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetLoadBalancer(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveLoadBalancer(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.LoadBalancer().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.LoadBalancer != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.LoadBalancerID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Assignments) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testAssignmentToOneSetOpFrontendUsingFrontend(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Assignment
	var b, c Frontend

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assignmentDBTypes, false, strmangle.SetComplement(assignmentPrimaryKeyColumns, assignmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, frontendDBTypes, false, strmangle.SetComplement(frontendPrimaryKeyColumns, frontendColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, frontendDBTypes, false, strmangle.SetComplement(frontendPrimaryKeyColumns, frontendColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Frontend{&b, &c} {
		err = a.SetFrontend(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Frontend != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Assignments[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.FrontendID, x.FrontendID) {
			t.Error("foreign key was wrong value", a.FrontendID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.FrontendID))
		reflect.Indirect(reflect.ValueOf(&a.FrontendID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.FrontendID, x.FrontendID) {
			t.Error("foreign key was wrong value", a.FrontendID, x.FrontendID)
		}
	}
}

func testAssignmentToOneRemoveOpFrontendUsingFrontend(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Assignment
	var b Frontend

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assignmentDBTypes, false, strmangle.SetComplement(assignmentPrimaryKeyColumns, assignmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, frontendDBTypes, false, strmangle.SetComplement(frontendPrimaryKeyColumns, frontendColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetFrontend(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveFrontend(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Frontend().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Frontend != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.FrontendID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Assignments) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testAssignmentsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Assignment{}
	if err = randomize.Struct(seed, o, assignmentDBTypes, true, assignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAssignmentsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Assignment{}
	if err = randomize.Struct(seed, o, assignmentDBTypes, true, assignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AssignmentSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAssignmentsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Assignment{}
	if err = randomize.Struct(seed, o, assignmentDBTypes, true, assignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Assignments().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	assignmentDBTypes = map[string]string{`CreatedAt`: `timestamptz`, `UpdatedAt`: `timestamptz`, `DeletedAt`: `timestamptz`, `AssignmentID`: `uuid`, `PoolID`: `uuid`, `FrontendID`: `uuid`, `LoadBalancerID`: `uuid`, `TenantID`: `uuid`}
	_                 = bytes.MinRead
)

func testAssignmentsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(assignmentPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(assignmentAllColumns) == len(assignmentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Assignment{}
	if err = randomize.Struct(seed, o, assignmentDBTypes, true, assignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Assignments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, assignmentDBTypes, true, assignmentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Assignment struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAssignmentsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(assignmentAllColumns) == len(assignmentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Assignment{}
	if err = randomize.Struct(seed, o, assignmentDBTypes, true, assignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Assignments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, assignmentDBTypes, true, assignmentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Assignment struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(assignmentAllColumns, assignmentPrimaryKeyColumns) {
		fields = assignmentAllColumns
	} else {
		fields = strmangle.SetComplement(
			assignmentAllColumns,
			assignmentPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AssignmentSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
