// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"errors"
	"fmt"
	"time"

	"go.infratographer.com/load-balancer-api/internal/ent/generated/loadbalancer"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/predicate"
	"go.infratographer.com/x/idx"
)

// LoadBalancerWhereInput represents a where input for filtering LoadBalancer queries.
type LoadBalancerWhereInput struct {
	Predicates []predicate.LoadBalancer  `json:"-"`
	Not        *LoadBalancerWhereInput   `json:"not,omitempty"`
	Or         []*LoadBalancerWhereInput `json:"or,omitempty"`
	And        []*LoadBalancerWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *idx.PrefixedID  `json:"id,omitempty"`
	IDNEQ   *idx.PrefixedID  `json:"idNEQ,omitempty"`
	IDIn    []idx.PrefixedID `json:"idIn,omitempty"`
	IDNotIn []idx.PrefixedID `json:"idNotIn,omitempty"`
	IDGT    *idx.PrefixedID  `json:"idGT,omitempty"`
	IDGTE   *idx.PrefixedID  `json:"idGTE,omitempty"`
	IDLT    *idx.PrefixedID  `json:"idLT,omitempty"`
	IDLTE   *idx.PrefixedID  `json:"idLTE,omitempty"`

	// "location_id" field predicates.
	LocationID             *idx.PrefixedID  `json:"locationID,omitempty"`
	LocationIDNEQ          *idx.PrefixedID  `json:"locationIDNEQ,omitempty"`
	LocationIDIn           []idx.PrefixedID `json:"locationIDIn,omitempty"`
	LocationIDNotIn        []idx.PrefixedID `json:"locationIDNotIn,omitempty"`
	LocationIDGT           *idx.PrefixedID  `json:"locationIDGT,omitempty"`
	LocationIDGTE          *idx.PrefixedID  `json:"locationIDGTE,omitempty"`
	LocationIDLT           *idx.PrefixedID  `json:"locationIDLT,omitempty"`
	LocationIDLTE          *idx.PrefixedID  `json:"locationIDLTE,omitempty"`
	LocationIDContains     *idx.PrefixedID  `json:"locationIDContains,omitempty"`
	LocationIDHasPrefix    *idx.PrefixedID  `json:"locationIDHasPrefix,omitempty"`
	LocationIDHasSuffix    *idx.PrefixedID  `json:"locationIDHasSuffix,omitempty"`
	LocationIDIsNil        bool             `json:"locationIDIsNil,omitempty"`
	LocationIDNotNil       bool             `json:"locationIDNotNil,omitempty"`
	LocationIDEqualFold    *idx.PrefixedID  `json:"locationIDEqualFold,omitempty"`
	LocationIDContainsFold *idx.PrefixedID  `json:"locationIDContainsFold,omitempty"`

	// "tenant_id" field predicates.
	TenantID             *idx.PrefixedID  `json:"tenantID,omitempty"`
	TenantIDNEQ          *idx.PrefixedID  `json:"tenantIDNEQ,omitempty"`
	TenantIDIn           []idx.PrefixedID `json:"tenantIDIn,omitempty"`
	TenantIDNotIn        []idx.PrefixedID `json:"tenantIDNotIn,omitempty"`
	TenantIDGT           *idx.PrefixedID  `json:"tenantIDGT,omitempty"`
	TenantIDGTE          *idx.PrefixedID  `json:"tenantIDGTE,omitempty"`
	TenantIDLT           *idx.PrefixedID  `json:"tenantIDLT,omitempty"`
	TenantIDLTE          *idx.PrefixedID  `json:"tenantIDLTE,omitempty"`
	TenantIDContains     *idx.PrefixedID  `json:"tenantIDContains,omitempty"`
	TenantIDHasPrefix    *idx.PrefixedID  `json:"tenantIDHasPrefix,omitempty"`
	TenantIDHasSuffix    *idx.PrefixedID  `json:"tenantIDHasSuffix,omitempty"`
	TenantIDIsNil        bool             `json:"tenantIDIsNil,omitempty"`
	TenantIDNotNil       bool             `json:"tenantIDNotNil,omitempty"`
	TenantIDEqualFold    *idx.PrefixedID  `json:"tenantIDEqualFold,omitempty"`
	TenantIDContainsFold *idx.PrefixedID  `json:"tenantIDContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "ip_address_id" field predicates.
	IPAddressID             *idx.PrefixedID  `json:"ipAddressID,omitempty"`
	IPAddressIDNEQ          *idx.PrefixedID  `json:"ipAddressIDNEQ,omitempty"`
	IPAddressIDIn           []idx.PrefixedID `json:"ipAddressIDIn,omitempty"`
	IPAddressIDNotIn        []idx.PrefixedID `json:"ipAddressIDNotIn,omitempty"`
	IPAddressIDGT           *idx.PrefixedID  `json:"ipAddressIDGT,omitempty"`
	IPAddressIDGTE          *idx.PrefixedID  `json:"ipAddressIDGTE,omitempty"`
	IPAddressIDLT           *idx.PrefixedID  `json:"ipAddressIDLT,omitempty"`
	IPAddressIDLTE          *idx.PrefixedID  `json:"ipAddressIDLTE,omitempty"`
	IPAddressIDContains     *idx.PrefixedID  `json:"ipAddressIDContains,omitempty"`
	IPAddressIDHasPrefix    *idx.PrefixedID  `json:"ipAddressIDHasPrefix,omitempty"`
	IPAddressIDHasSuffix    *idx.PrefixedID  `json:"ipAddressIDHasSuffix,omitempty"`
	IPAddressIDEqualFold    *idx.PrefixedID  `json:"ipAddressIDEqualFold,omitempty"`
	IPAddressIDContainsFold *idx.PrefixedID  `json:"ipAddressIDContainsFold,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *LoadBalancerWhereInput) AddPredicates(predicates ...predicate.LoadBalancer) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the LoadBalancerWhereInput filter on the LoadBalancerQuery builder.
func (i *LoadBalancerWhereInput) Filter(q *LoadBalancerQuery) (*LoadBalancerQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyLoadBalancerWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyLoadBalancerWhereInput is returned in case the LoadBalancerWhereInput is empty.
var ErrEmptyLoadBalancerWhereInput = errors.New("generated: empty predicate LoadBalancerWhereInput")

// P returns a predicate for filtering loadbalancers.
// An error is returned if the input is empty or invalid.
func (i *LoadBalancerWhereInput) P() (predicate.LoadBalancer, error) {
	var predicates []predicate.LoadBalancer
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, loadbalancer.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.LoadBalancer, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, loadbalancer.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.LoadBalancer, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, loadbalancer.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, loadbalancer.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, loadbalancer.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, loadbalancer.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, loadbalancer.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, loadbalancer.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, loadbalancer.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, loadbalancer.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, loadbalancer.IDLTE(*i.IDLTE))
	}
	if i.LocationID != nil {
		predicates = append(predicates, loadbalancer.LocationIDEQ(*i.LocationID))
	}
	if i.LocationIDNEQ != nil {
		predicates = append(predicates, loadbalancer.LocationIDNEQ(*i.LocationIDNEQ))
	}
	if len(i.LocationIDIn) > 0 {
		predicates = append(predicates, loadbalancer.LocationIDIn(i.LocationIDIn...))
	}
	if len(i.LocationIDNotIn) > 0 {
		predicates = append(predicates, loadbalancer.LocationIDNotIn(i.LocationIDNotIn...))
	}
	if i.LocationIDGT != nil {
		predicates = append(predicates, loadbalancer.LocationIDGT(*i.LocationIDGT))
	}
	if i.LocationIDGTE != nil {
		predicates = append(predicates, loadbalancer.LocationIDGTE(*i.LocationIDGTE))
	}
	if i.LocationIDLT != nil {
		predicates = append(predicates, loadbalancer.LocationIDLT(*i.LocationIDLT))
	}
	if i.LocationIDLTE != nil {
		predicates = append(predicates, loadbalancer.LocationIDLTE(*i.LocationIDLTE))
	}
	if i.LocationIDContains != nil {
		predicates = append(predicates, loadbalancer.LocationIDContains(*i.LocationIDContains))
	}
	if i.LocationIDHasPrefix != nil {
		predicates = append(predicates, loadbalancer.LocationIDHasPrefix(*i.LocationIDHasPrefix))
	}
	if i.LocationIDHasSuffix != nil {
		predicates = append(predicates, loadbalancer.LocationIDHasSuffix(*i.LocationIDHasSuffix))
	}
	if i.LocationIDIsNil {
		predicates = append(predicates, loadbalancer.LocationIDIsNil())
	}
	if i.LocationIDNotNil {
		predicates = append(predicates, loadbalancer.LocationIDNotNil())
	}
	if i.LocationIDEqualFold != nil {
		predicates = append(predicates, loadbalancer.LocationIDEqualFold(*i.LocationIDEqualFold))
	}
	if i.LocationIDContainsFold != nil {
		predicates = append(predicates, loadbalancer.LocationIDContainsFold(*i.LocationIDContainsFold))
	}
	if i.TenantID != nil {
		predicates = append(predicates, loadbalancer.TenantIDEQ(*i.TenantID))
	}
	if i.TenantIDNEQ != nil {
		predicates = append(predicates, loadbalancer.TenantIDNEQ(*i.TenantIDNEQ))
	}
	if len(i.TenantIDIn) > 0 {
		predicates = append(predicates, loadbalancer.TenantIDIn(i.TenantIDIn...))
	}
	if len(i.TenantIDNotIn) > 0 {
		predicates = append(predicates, loadbalancer.TenantIDNotIn(i.TenantIDNotIn...))
	}
	if i.TenantIDGT != nil {
		predicates = append(predicates, loadbalancer.TenantIDGT(*i.TenantIDGT))
	}
	if i.TenantIDGTE != nil {
		predicates = append(predicates, loadbalancer.TenantIDGTE(*i.TenantIDGTE))
	}
	if i.TenantIDLT != nil {
		predicates = append(predicates, loadbalancer.TenantIDLT(*i.TenantIDLT))
	}
	if i.TenantIDLTE != nil {
		predicates = append(predicates, loadbalancer.TenantIDLTE(*i.TenantIDLTE))
	}
	if i.TenantIDContains != nil {
		predicates = append(predicates, loadbalancer.TenantIDContains(*i.TenantIDContains))
	}
	if i.TenantIDHasPrefix != nil {
		predicates = append(predicates, loadbalancer.TenantIDHasPrefix(*i.TenantIDHasPrefix))
	}
	if i.TenantIDHasSuffix != nil {
		predicates = append(predicates, loadbalancer.TenantIDHasSuffix(*i.TenantIDHasSuffix))
	}
	if i.TenantIDIsNil {
		predicates = append(predicates, loadbalancer.TenantIDIsNil())
	}
	if i.TenantIDNotNil {
		predicates = append(predicates, loadbalancer.TenantIDNotNil())
	}
	if i.TenantIDEqualFold != nil {
		predicates = append(predicates, loadbalancer.TenantIDEqualFold(*i.TenantIDEqualFold))
	}
	if i.TenantIDContainsFold != nil {
		predicates = append(predicates, loadbalancer.TenantIDContainsFold(*i.TenantIDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, loadbalancer.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, loadbalancer.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, loadbalancer.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, loadbalancer.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, loadbalancer.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, loadbalancer.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, loadbalancer.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, loadbalancer.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, loadbalancer.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, loadbalancer.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, loadbalancer.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, loadbalancer.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, loadbalancer.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, loadbalancer.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, loadbalancer.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, loadbalancer.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, loadbalancer.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, loadbalancer.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, loadbalancer.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, loadbalancer.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, loadbalancer.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, loadbalancer.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, loadbalancer.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, loadbalancer.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, loadbalancer.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, loadbalancer.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, loadbalancer.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, loadbalancer.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, loadbalancer.NameContainsFold(*i.NameContainsFold))
	}
	if i.IPAddressID != nil {
		predicates = append(predicates, loadbalancer.IPAddressIDEQ(*i.IPAddressID))
	}
	if i.IPAddressIDNEQ != nil {
		predicates = append(predicates, loadbalancer.IPAddressIDNEQ(*i.IPAddressIDNEQ))
	}
	if len(i.IPAddressIDIn) > 0 {
		predicates = append(predicates, loadbalancer.IPAddressIDIn(i.IPAddressIDIn...))
	}
	if len(i.IPAddressIDNotIn) > 0 {
		predicates = append(predicates, loadbalancer.IPAddressIDNotIn(i.IPAddressIDNotIn...))
	}
	if i.IPAddressIDGT != nil {
		predicates = append(predicates, loadbalancer.IPAddressIDGT(*i.IPAddressIDGT))
	}
	if i.IPAddressIDGTE != nil {
		predicates = append(predicates, loadbalancer.IPAddressIDGTE(*i.IPAddressIDGTE))
	}
	if i.IPAddressIDLT != nil {
		predicates = append(predicates, loadbalancer.IPAddressIDLT(*i.IPAddressIDLT))
	}
	if i.IPAddressIDLTE != nil {
		predicates = append(predicates, loadbalancer.IPAddressIDLTE(*i.IPAddressIDLTE))
	}
	if i.IPAddressIDContains != nil {
		predicates = append(predicates, loadbalancer.IPAddressIDContains(*i.IPAddressIDContains))
	}
	if i.IPAddressIDHasPrefix != nil {
		predicates = append(predicates, loadbalancer.IPAddressIDHasPrefix(*i.IPAddressIDHasPrefix))
	}
	if i.IPAddressIDHasSuffix != nil {
		predicates = append(predicates, loadbalancer.IPAddressIDHasSuffix(*i.IPAddressIDHasSuffix))
	}
	if i.IPAddressIDEqualFold != nil {
		predicates = append(predicates, loadbalancer.IPAddressIDEqualFold(*i.IPAddressIDEqualFold))
	}
	if i.IPAddressIDContainsFold != nil {
		predicates = append(predicates, loadbalancer.IPAddressIDContainsFold(*i.IPAddressIDContainsFold))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyLoadBalancerWhereInput
	case 1:
		return predicates[0], nil
	default:
		return loadbalancer.And(predicates...), nil
	}
}
