// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/loadbalancer"
	"go.infratographer.com/x/idx"
)

// LoadBalancer is the model entity for the LoadBalancer schema.
type LoadBalancer struct {
	config `json:"-"`
	// ID of the ent.
	ID idx.PrefixedID `json:"id,omitempty"`
	// LocationID holds the value of the "location_id" field.
	LocationID idx.PrefixedID `json:"location_id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID idx.PrefixedID `json:"tenant_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// IPAddressID holds the value of the "ip_address_id" field.
	IPAddressID  idx.PrefixedID `json:"ip_address_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LoadBalancer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case loadbalancer.FieldID, loadbalancer.FieldLocationID, loadbalancer.FieldTenantID, loadbalancer.FieldIPAddressID:
			values[i] = new(idx.PrefixedID)
		case loadbalancer.FieldName:
			values[i] = new(sql.NullString)
		case loadbalancer.FieldCreatedAt, loadbalancer.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LoadBalancer fields.
func (lb *LoadBalancer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case loadbalancer.FieldID:
			if value, ok := values[i].(*idx.PrefixedID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				lb.ID = *value
			}
		case loadbalancer.FieldLocationID:
			if value, ok := values[i].(*idx.PrefixedID); !ok {
				return fmt.Errorf("unexpected type %T for field location_id", values[i])
			} else if value != nil {
				lb.LocationID = *value
			}
		case loadbalancer.FieldTenantID:
			if value, ok := values[i].(*idx.PrefixedID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				lb.TenantID = *value
			}
		case loadbalancer.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				lb.CreatedAt = value.Time
			}
		case loadbalancer.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				lb.UpdatedAt = value.Time
			}
		case loadbalancer.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				lb.Name = value.String
			}
		case loadbalancer.FieldIPAddressID:
			if value, ok := values[i].(*idx.PrefixedID); !ok {
				return fmt.Errorf("unexpected type %T for field ip_address_id", values[i])
			} else if value != nil {
				lb.IPAddressID = *value
			}
		default:
			lb.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LoadBalancer.
// This includes values selected through modifiers, order, etc.
func (lb *LoadBalancer) Value(name string) (ent.Value, error) {
	return lb.selectValues.Get(name)
}

// Update returns a builder for updating this LoadBalancer.
// Note that you need to call LoadBalancer.Unwrap() before calling this method if this LoadBalancer
// was returned from a transaction, and the transaction was committed or rolled back.
func (lb *LoadBalancer) Update() *LoadBalancerUpdateOne {
	return NewLoadBalancerClient(lb.config).UpdateOne(lb)
}

// Unwrap unwraps the LoadBalancer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lb *LoadBalancer) Unwrap() *LoadBalancer {
	_tx, ok := lb.config.driver.(*txDriver)
	if !ok {
		panic("generated: LoadBalancer is not a transactional entity")
	}
	lb.config.driver = _tx.drv
	return lb
}

// String implements the fmt.Stringer.
func (lb *LoadBalancer) String() string {
	var builder strings.Builder
	builder.WriteString("LoadBalancer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", lb.ID))
	builder.WriteString("location_id=")
	builder.WriteString(fmt.Sprintf("%v", lb.LocationID))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", lb.TenantID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(lb.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(lb.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(lb.Name)
	builder.WriteString(", ")
	builder.WriteString("ip_address_id=")
	builder.WriteString(fmt.Sprintf("%v", lb.IPAddressID))
	builder.WriteByte(')')
	return builder.String()
}

// IsEntity implement fedruntime.Entity
func (lb LoadBalancer) IsEntity() {}

// LoadBalancers is a parsable slice of LoadBalancer.
type LoadBalancers []*LoadBalancer
