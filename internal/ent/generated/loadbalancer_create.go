// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.infratographer.com/load-balancer-api/internal/ent/generated/loadbalancer"
	"go.infratographer.com/x/idx"
)

// LoadBalancerCreate is the builder for creating a LoadBalancer entity.
type LoadBalancerCreate struct {
	config
	mutation *LoadBalancerMutation
	hooks    []Hook
}

// SetLocationID sets the "location_id" field.
func (lbc *LoadBalancerCreate) SetLocationID(ii idx.PrefixedID) *LoadBalancerCreate {
	lbc.mutation.SetLocationID(ii)
	return lbc
}

// SetNillableLocationID sets the "location_id" field if the given value is not nil.
func (lbc *LoadBalancerCreate) SetNillableLocationID(ii *idx.PrefixedID) *LoadBalancerCreate {
	if ii != nil {
		lbc.SetLocationID(*ii)
	}
	return lbc
}

// SetTenantID sets the "tenant_id" field.
func (lbc *LoadBalancerCreate) SetTenantID(ii idx.PrefixedID) *LoadBalancerCreate {
	lbc.mutation.SetTenantID(ii)
	return lbc
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (lbc *LoadBalancerCreate) SetNillableTenantID(ii *idx.PrefixedID) *LoadBalancerCreate {
	if ii != nil {
		lbc.SetTenantID(*ii)
	}
	return lbc
}

// SetCreatedAt sets the "created_at" field.
func (lbc *LoadBalancerCreate) SetCreatedAt(t time.Time) *LoadBalancerCreate {
	lbc.mutation.SetCreatedAt(t)
	return lbc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lbc *LoadBalancerCreate) SetNillableCreatedAt(t *time.Time) *LoadBalancerCreate {
	if t != nil {
		lbc.SetCreatedAt(*t)
	}
	return lbc
}

// SetUpdatedAt sets the "updated_at" field.
func (lbc *LoadBalancerCreate) SetUpdatedAt(t time.Time) *LoadBalancerCreate {
	lbc.mutation.SetUpdatedAt(t)
	return lbc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lbc *LoadBalancerCreate) SetNillableUpdatedAt(t *time.Time) *LoadBalancerCreate {
	if t != nil {
		lbc.SetUpdatedAt(*t)
	}
	return lbc
}

// SetName sets the "name" field.
func (lbc *LoadBalancerCreate) SetName(s string) *LoadBalancerCreate {
	lbc.mutation.SetName(s)
	return lbc
}

// SetIPAddressID sets the "ip_address_id" field.
func (lbc *LoadBalancerCreate) SetIPAddressID(ii idx.PrefixedID) *LoadBalancerCreate {
	lbc.mutation.SetIPAddressID(ii)
	return lbc
}

// SetID sets the "id" field.
func (lbc *LoadBalancerCreate) SetID(ii idx.PrefixedID) *LoadBalancerCreate {
	lbc.mutation.SetID(ii)
	return lbc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (lbc *LoadBalancerCreate) SetNillableID(ii *idx.PrefixedID) *LoadBalancerCreate {
	if ii != nil {
		lbc.SetID(*ii)
	}
	return lbc
}

// Mutation returns the LoadBalancerMutation object of the builder.
func (lbc *LoadBalancerCreate) Mutation() *LoadBalancerMutation {
	return lbc.mutation
}

// Save creates the LoadBalancer in the database.
func (lbc *LoadBalancerCreate) Save(ctx context.Context) (*LoadBalancer, error) {
	lbc.defaults()
	return withHooks[*LoadBalancer, LoadBalancerMutation](ctx, lbc.sqlSave, lbc.mutation, lbc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lbc *LoadBalancerCreate) SaveX(ctx context.Context) *LoadBalancer {
	v, err := lbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lbc *LoadBalancerCreate) Exec(ctx context.Context) error {
	_, err := lbc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lbc *LoadBalancerCreate) ExecX(ctx context.Context) {
	if err := lbc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lbc *LoadBalancerCreate) defaults() {
	if _, ok := lbc.mutation.CreatedAt(); !ok {
		v := loadbalancer.DefaultCreatedAt()
		lbc.mutation.SetCreatedAt(v)
	}
	if _, ok := lbc.mutation.UpdatedAt(); !ok {
		v := loadbalancer.DefaultUpdatedAt()
		lbc.mutation.SetUpdatedAt(v)
	}
	if _, ok := lbc.mutation.ID(); !ok {
		v := loadbalancer.DefaultID()
		lbc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lbc *LoadBalancerCreate) check() error {
	if v, ok := lbc.mutation.LocationID(); ok {
		if err := loadbalancer.LocationIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "location_id", err: fmt.Errorf(`generated: validator failed for field "LoadBalancer.location_id": %w`, err)}
		}
	}
	if v, ok := lbc.mutation.TenantID(); ok {
		if err := loadbalancer.TenantIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`generated: validator failed for field "LoadBalancer.tenant_id": %w`, err)}
		}
	}
	if _, ok := lbc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "LoadBalancer.created_at"`)}
	}
	if _, ok := lbc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "LoadBalancer.updated_at"`)}
	}
	if _, ok := lbc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "LoadBalancer.name"`)}
	}
	if v, ok := lbc.mutation.Name(); ok {
		if err := loadbalancer.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "LoadBalancer.name": %w`, err)}
		}
	}
	if _, ok := lbc.mutation.IPAddressID(); !ok {
		return &ValidationError{Name: "ip_address_id", err: errors.New(`generated: missing required field "LoadBalancer.ip_address_id"`)}
	}
	return nil
}

func (lbc *LoadBalancerCreate) sqlSave(ctx context.Context) (*LoadBalancer, error) {
	if err := lbc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lbc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*idx.PrefixedID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	lbc.mutation.id = &_node.ID
	lbc.mutation.done = true
	return _node, nil
}

func (lbc *LoadBalancerCreate) createSpec() (*LoadBalancer, *sqlgraph.CreateSpec) {
	var (
		_node = &LoadBalancer{config: lbc.config}
		_spec = sqlgraph.NewCreateSpec(loadbalancer.Table, sqlgraph.NewFieldSpec(loadbalancer.FieldID, field.TypeString))
	)
	if id, ok := lbc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := lbc.mutation.LocationID(); ok {
		_spec.SetField(loadbalancer.FieldLocationID, field.TypeString, value)
		_node.LocationID = value
	}
	if value, ok := lbc.mutation.TenantID(); ok {
		_spec.SetField(loadbalancer.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := lbc.mutation.CreatedAt(); ok {
		_spec.SetField(loadbalancer.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := lbc.mutation.UpdatedAt(); ok {
		_spec.SetField(loadbalancer.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := lbc.mutation.Name(); ok {
		_spec.SetField(loadbalancer.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := lbc.mutation.IPAddressID(); ok {
		_spec.SetField(loadbalancer.FieldIPAddressID, field.TypeString, value)
		_node.IPAddressID = value
	}
	return _node, _spec
}

// LoadBalancerCreateBulk is the builder for creating many LoadBalancer entities in bulk.
type LoadBalancerCreateBulk struct {
	config
	builders []*LoadBalancerCreate
}

// Save creates the LoadBalancer entities in the database.
func (lbcb *LoadBalancerCreateBulk) Save(ctx context.Context) ([]*LoadBalancer, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lbcb.builders))
	nodes := make([]*LoadBalancer, len(lbcb.builders))
	mutators := make([]Mutator, len(lbcb.builders))
	for i := range lbcb.builders {
		func(i int, root context.Context) {
			builder := lbcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LoadBalancerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lbcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lbcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lbcb *LoadBalancerCreateBulk) SaveX(ctx context.Context) []*LoadBalancer {
	v, err := lbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lbcb *LoadBalancerCreateBulk) Exec(ctx context.Context) error {
	_, err := lbcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lbcb *LoadBalancerCreateBulk) ExecX(ctx context.Context) {
	if err := lbcb.Exec(ctx); err != nil {
		panic(err)
	}
}
