// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"time"

	"go.infratographer.com/load-balancer-api/internal/ent/generated/loadbalancer"
	"go.infratographer.com/load-balancer-api/internal/ent/schema"
	"go.infratographer.com/x/idx"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	loadbalancerMixin := schema.LoadBalancer{}.Mixin()
	loadbalancerMixinFields0 := loadbalancerMixin[0].Fields()
	_ = loadbalancerMixinFields0
	loadbalancerMixinFields1 := loadbalancerMixin[1].Fields()
	_ = loadbalancerMixinFields1
	loadbalancerMixinFields2 := loadbalancerMixin[2].Fields()
	_ = loadbalancerMixinFields2
	loadbalancerMixinFields3 := loadbalancerMixin[3].Fields()
	_ = loadbalancerMixinFields3
	loadbalancerFields := schema.LoadBalancer{}.Fields()
	_ = loadbalancerFields
	// loadbalancerDescLocationID is the schema descriptor for location_id field.
	loadbalancerDescLocationID := loadbalancerMixinFields1[0].Descriptor()
	// loadbalancer.LocationIDValidator is a validator for the "location_id" field. It is called by the builders before save.
	loadbalancer.LocationIDValidator = func() func(string) error {
		validators := loadbalancerDescLocationID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(location_id string) error {
			for _, fn := range fns {
				if err := fn(location_id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// loadbalancerDescTenantID is the schema descriptor for tenant_id field.
	loadbalancerDescTenantID := loadbalancerMixinFields2[0].Descriptor()
	// loadbalancer.TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	loadbalancer.TenantIDValidator = func() func(string) error {
		validators := loadbalancerDescTenantID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(tenant_id string) error {
			for _, fn := range fns {
				if err := fn(tenant_id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// loadbalancerDescCreatedAt is the schema descriptor for created_at field.
	loadbalancerDescCreatedAt := loadbalancerMixinFields3[0].Descriptor()
	// loadbalancer.DefaultCreatedAt holds the default value on creation for the created_at field.
	loadbalancer.DefaultCreatedAt = loadbalancerDescCreatedAt.Default.(func() time.Time)
	// loadbalancerDescUpdatedAt is the schema descriptor for updated_at field.
	loadbalancerDescUpdatedAt := loadbalancerMixinFields3[1].Descriptor()
	// loadbalancer.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	loadbalancer.DefaultUpdatedAt = loadbalancerDescUpdatedAt.Default.(func() time.Time)
	// loadbalancer.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	loadbalancer.UpdateDefaultUpdatedAt = loadbalancerDescUpdatedAt.UpdateDefault.(func() time.Time)
	// loadbalancerDescName is the schema descriptor for name field.
	loadbalancerDescName := loadbalancerFields[0].Descriptor()
	// loadbalancer.NameValidator is a validator for the "name" field. It is called by the builders before save.
	loadbalancer.NameValidator = loadbalancerDescName.Validators[0].(func(string) error)
	// loadbalancerDescID is the schema descriptor for id field.
	loadbalancerDescID := loadbalancerMixinFields0[0].Descriptor()
	// loadbalancer.DefaultID holds the default value on creation for the id field.
	loadbalancer.DefaultID = loadbalancerDescID.Default.(func() idx.PrefixedID)
}
